import { computed } from 'vue';
import { SHARE_CONFIG } from './socialShareConfig';
import { formatUrl, buildShareDescription, buildTelegramShareDescription, getImageUrl, getFullImageUrl } from './socialShareUtils';


export function useSocialShare(props, toast) {
    // Utility functions
    const formatUrl = (url) => {
        try {
            const urlObj = new URL(url);
            return `${urlObj.hostname}${urlObj.pathname.slice(0, 15)}${urlObj.pathname.length > 15 ? '...' : ''}`;
        } catch {
            return url.slice(0, 30) + (url.length > 30 ? '...' : '');
        }
    };

    // Share metadata computation
    const shareMetaData = computed(() => {
        const defaultImage = '/images/apartments.webp';
        const { property, title, adUrl, imageUrl } = props;
        const urlFindProperty = `/${property.category.code}/${property.subcategory.code}/${property.idProperty}`;
        const newUrl = new URL(urlFindProperty, window.location.origin).href;

        const descriptionParts = buildShareDescription(property);
        let imageFullUrl = getFullImageUrl(getImageUrl(property, imageUrl));

        if (!imageFullUrl) {
            imageFullUrl = new URL(defaultImage, window.location.origin).href;
        }
        const descriptionPartsTelegram = buildTelegramShareDescription(property);

        return {
            title,
            description: descriptionParts,
            image: imageFullUrl,
            url: newUrl || adUrl,
            formattedUrl: formatUrl(adUrl),
            descriptionPartsTelegram
        };
    });

    // Share functionality
    const shareContent = (platform) => {
        try {
            const config = SHARE_CONFIG[platform];
            if (!config) throw new Error(`Unsupported platform: ${platform}`);

            const url = config.buildUrl(shareMetaData.value);
            window.open(url, '_blank', 'width=600,height=400');
        } catch (error) {
            showToast('error', '–ü–æ–º–∏–ª–∫–∞', `–ù–µ–º–æ–∂–ª–∏–≤–æ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è —á–µ—Ä–µ–∑ ${platform}`);
            console.error(`Share error (${platform}):`, error);
        }
    };

    const showToast = (severity, summary, detail) => {
        toast.add({
            severity,
            summary,
            detail,
            life: 3000
        });
    };

    const copyLink = async () => {
        try {
            await navigator.clipboard.writeText(props.adUrl);
            showToast('success', '–ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è', '–ü–æ—Å–∏–ª–∞–Ω–Ω—è —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É');
        } catch (error) {
            showToast('error', '–ü–æ–º–∏–ª–∫–∞', '–ù–µ–º–æ–∂–ª–∏–≤–æ —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è');
        }
    };

    // Share items for the speed dial
    const shareItems = computed(() => [
        ...Object.entries(SHARE_CONFIG).map(([platform, config]) => ({
            label: config.label,
            icon: config.icon,
            command: () => shareContent(platform)
        })),
        {
            label: '–ö–æ–ø—ñ—é–≤–∞—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è',
            icon: 'pi pi-copy',
            command: copyLink
        }
    ]);

    // Telegram specific share
    const shareProductTelegramWebApp = () => {
        console.log('Share product');
        const property = props.property;

        const descriptionParts = [
            `–ü–æ–¥–∏–≤—ñ—Ç—å—Å—è –Ω–∞ —Ü–µ–π –æ–±'—î–∫—Ç: ${props.property.title} - ${props.property.price} $`,
            `üè† –ö—ñ–º–Ω–∞—Ç: ${property.rooms?.all || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'} üí∞ –¶—ñ–Ω–∞: ${property.price} USD`,
            `üìè –ü–ª–æ—â–∞: ${property.apartmentArea?.totalArea} –º¬≤  üîù –ü–æ–≤–µ—Ä—Ö: ${property.floors.floor}/${property.floors.totalFloors}`,
            `üèôÔ∏è –ê–¥—Ä–µ—Å–∞: ${property.address.region.name} / ${property.address.city.name || ''} / ${property.address.area.name || ''}/n`,
        ].filter(Boolean).join('\n');

        const text = descriptionParts;
        const url = props.adUrl;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram WebApp API –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        telegram.shareContent(text, url);
    };

    return {
        shareMetaData,
        shareItems,
        shareProductTelegramWebApp
    };
}
